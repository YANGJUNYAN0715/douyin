// Code generated by hertz generator.

package api

import (
	"context"
	//"strconv"
	"log"

	"github.com/YANGJUNYAN0715/douyin/tree/zhao/cmd/api/biz/model/api"
	"github.com/YANGJUNYAN0715/douyin/tree/zhao/cmd/api/biz/mw"
	"github.com/YANGJUNYAN0715/douyin/tree/zhao/cmd/api/biz/rpc"
	"github.com/YANGJUNYAN0715/douyin/tree/zhao/kitex_gen/user"
	"github.com/YANGJUNYAN0715/douyin/tree/zhao/pkg/consts"
	"github.com/YANGJUNYAN0715/douyin/tree/zhao/pkg/errno"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"

	"github.com/YANGJUNYAN0715/douyin/tree/zhao/kitex_gen/feed"
)

// Register .
// @router /douyin/user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}

	err = rpc.Register(context.Background(),&user.DouyinUserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil{
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	SendResponse(c, errno.Success, nil)
}

// Login .
// @router /douyin/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// GetUserById .
// @router /douyin/user/ [GET]
func GetUserById(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	//从token中获取id
	u, _ := c.Get(consts.IdentityKey)
	
	if u == nil {
		SendResponse(c, errno.Token2UserIdErr, nil)
		return
	}
	//越权错误
	if req.UserID != 0 && req.UserID != u.(*api.User).ID {
		SendResponse(c, errno.BrokenAccessControlErr, nil)
		return
	}
	if req.UserID == 0 {
		req.UserID = u.(*api.User).ID
	}
	log.Println(req.UserID)
	log.Println(req.Token)
	// resp := new(api.DouyinUserResponse)
	userinfo,err := rpc.GetUserById(ctx,&user.DouyinUserRequest{
		UserId: req.UserID,
		Token:  req.Token,
	})
	log.Println("***api-service***")
	log.Println(userinfo)
	// 客户端对JSON的名称有要求，不适用SendResponse
	Err := errno.ConvertErr(errno.Success)
	c.JSON(consts.StatusOK, utils.H{
		"status_code": Err.ErrCode,
		"status_msg":  Err.ErrMsg,
		"user":   userinfo,
	})
	return
}

// GetUserFeed .
// @router /douyin/feed/ [GET]
func GetUserFeed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	//从token中获取id
	u, _ := c.Get(consts.IdentityKey)
	
	if u == nil {
		SendResponse(c, errno.Token2UserIdErr, nil)
		return
	}
	//越权错误
	if req.UserID != 0 && req.UserID != u.(*api.User).ID {
		SendResponse(c, errno.BrokenAccessControlErr, nil)
		return
	}
	if req.UserID == 0 {
		req.UserID = u.(*api.User).ID
	}

	log.Println("-------req.UserID-----")
	log.Println(req.UserID)
	feedresponse,err := rpc.GetUserFeed(ctx,&feed.DouyinFeedRequest{
		LatestTime: req.LatestTime,
		Token:  req.Token,
	})
	//
	//SendResponse2(c, feedresponse)
	Err := errno.ConvertErr(errno.Success)
	c.JSON(consts.StatusOK, utils.H{
		"status_code": Err.ErrCode,
		"status_msg":  Err.ErrMsg,
		"next_time": feedresponse.NextTime,
    	"video_list": feedresponse.VideoList
	})
	return
}

// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/YANGJUNYAN0715/douyin/tree/li/cmd/api/biz/model/api"
	"github.com/YANGJUNYAN0715/douyin/tree/li/cmd/api/biz/mw"
	"github.com/YANGJUNYAN0715/douyin/tree/li/cmd/api/biz/rpc"
	"github.com/YANGJUNYAN0715/douyin/tree/li/kitex_gen/favorite"
	"github.com/YANGJUNYAN0715/douyin/tree/li/kitex_gen/relation"
	"github.com/YANGJUNYAN0715/douyin/tree/li/kitex_gen/user"
	"github.com/YANGJUNYAN0715/douyin/tree/li/pkg/consts"
	"github.com/YANGJUNYAN0715/douyin/tree/li/pkg/errno"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"log"
	"strconv"
)

// Register .
// @router /douyin/user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}

	err = rpc.Register(context.Background(), &user.DouyinUserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	SendResponse(c, errno.Success, nil)
}

// Login .
// @router /douyin/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinRelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	//从token中获取id
	u, _ := c.Get(consts.IdentityKey)
	if u == nil {
		SendResponse(c, errno.Token2UserIdErr, nil)
		return
	}
	log.Println(u)
	// log.Println("userid:%d",u.(*api.User).ID)
	err = rpc.RelationAction(context.Background(), &relation.DouyinRelationActionRequest{
		UserId:     u.(*api.User).ID,
		Token:      req.Token,
		ToUserId:   req.ToUserID,
		ActionType: req.ActionType,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}

	SendResponse(c, errno.Success, nil)
}

// RelationFollowList .
// @router /douyin/relation/follow/list/ [GET]
func RelationFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinRelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}

	//从token中获取id
	u, _ := c.Get(consts.IdentityKey)
	if u == nil {
		SendResponse(c, errno.Token2UserIdErr, nil)
		return
	}
	//越权错误
	if req.UserID != 0 && req.UserID != u.(*api.User).ID {
		SendResponse(c, errno.BrokenAccessControlErr, nil)
		return
	}
	if req.UserID == 0 {
		req.UserID = u.(*api.User).ID
	}

	// resp := new(api.DouyinRelationFollowListResponse)
	users, err := rpc.RelationFollowList(context.Background(), &relation.DouyinRelationFollowListRequest{
		UserId: req.UserID,
		Token:  req.Token,
	})

	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	// log.Println("***api.go***")
	// log.Println(users)
	// SendResponse(c, errno.Success, utils.H{
	// 	"user_list": users,
	// })
	// 客户端对JSON的名称有要求，不适用SendResponse
	Err := errno.ConvertErr(errno.Success)
	c.JSON(consts.StatusOK, utils.H{
		"status_code": Err.ErrCode,
		"status_msg":  Err.ErrMsg,
		"user_list":   users,
	})
}

// RelationFollowerList .
// @router /douyin/relation/follower/list/ [GET]
func RelationFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinRelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	//从token中获取id
	u, _ := c.Get(consts.IdentityKey)
	if u == nil {
		SendResponse(c, errno.Token2UserIdErr, nil)
		return
	}
	//越权错误
	if req.UserID != 0 && req.UserID != u.(*api.User).ID {
		SendResponse(c, errno.BrokenAccessControlErr, nil)
		return
	}
	if req.UserID == 0 {
		req.UserID = u.(*api.User).ID
	}
	// resp := new(api.DouyinRelationFollowerListResponse)
	users, err := rpc.RelationFollowerList(context.Background(), &relation.DouyinRelationFollowerListRequest{
		UserId: req.UserID,
		Token:  req.Token,
	})

	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}

	// SendResponse(c, errno.Success, utils.H{
	// 	"user_list": users,
	// })
	// 客户端对JSON的名称有要求，不适用SendResponse
	Err := errno.ConvertErr(errno.Success)
	c.JSON(consts.StatusOK, utils.H{
		"status_code": Err.ErrCode,
		"status_msg":  Err.ErrMsg,
		"user_list":   users,
	})
}

// RelationFriendList .
// @router /douyin/relation/friend/list/ [GET]
func RelationFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinRelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	//从token中获取id
	u, _ := c.Get(consts.IdentityKey)
	if u == nil {
		SendResponse(c, errno.Token2UserIdErr, nil)
		return
	}
	//越权错误
	if req.UserID != 0 && req.UserID != u.(*api.User).ID {
		SendResponse(c, errno.BrokenAccessControlErr, nil)
		return
	}
	if req.UserID == 0 {
		req.UserID = u.(*api.User).ID
	}
	friends, err := rpc.RelationFriendList(context.Background(), &relation.DouyinRelationFriendListRequest{
		UserId: req.UserID,
		Token:  req.Token,
	})

	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}

	// SendResponse(c, errno.Success, utils.H{
	// 	"user_list": friends,
	// })
	// 客户端对JSON的名称有要求，不适用SendResponse
	Err := errno.ConvertErr(errno.Success)
	c.JSON(consts.StatusOK, utils.H{
		"status_code": Err.ErrCode,
		"status_msg":  Err.ErrMsg,
		"user_list":   friends,
	})
}

// Info .
// @router /douyin/user/ [GET]
func Info(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	//从token中获取id
	u, _ := c.Get(consts.IdentityKey)
	if u == nil {
		SendResponse(c, errno.Token2UserIdErr, nil)
		return
	}
	//越权错误
	if req.UserID != 0 && req.UserID != u.(*api.User).ID {
		SendResponse(c, errno.BrokenAccessControlErr, nil)
		return
	}
	if req.UserID == 0 {
		req.UserID = u.(*api.User).ID
	}
	// resp := new(api.DouyinUserResponse)
	userinfo, err := rpc.Info(ctx, &user.DouyinUserRequest{
		UserId: req.UserID,
		Token:  req.Token,
	})
	log.Println("***api-service***")
	log.Println(userinfo)
	// 客户端对JSON的名称有要求，不适用SendResponse
	Err := errno.ConvertErr(errno.Success)
	c.JSON(consts.StatusOK, utils.H{
		"status_code": Err.ErrCode,
		"status_msg":  Err.ErrMsg,
		"user":        userinfo,
	})
}

// 传递 点赞操作 的上下文至 Favorite 服务的 RPC 客户端, 并获取相应的响应.
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var paramVar FavoriteActionParam
	token := c.Query("token")
	video_id := c.Query("video_id")
	action_type := c.Query("action_type")

	vid, err := strconv.Atoi(video_id)
	if err != nil {
		SendResponse(c, nil, nil)
		return
	}
	act, err := strconv.Atoi(action_type)
	if err != nil {
		SendResponse(c, nil, nil)
		return
	}

	paramVar.Token = token
	paramVar.VideoId = int64(vid)
	paramVar.ActionType = int32(act)

	err = rpc.FavoriteAction(ctx, &favorite.FavoriteActionRequest{
		UserId:     paramVar.UserId,
		Token:      paramVar.Token,
		VideoId:    paramVar.VideoId,
		ActionType: paramVar.ActionType,
	})
	if err != nil {
		SendResponse(c, nil, nil)
		return
	}
	SendResponse(c, errno.Success, nil)
}

// 传递 获取点赞列表操作 的上下文至 Favorite 服务的 RPC 客户端, 并获取相应的响应.
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var paramVar UserParam
	userid, err := strconv.Atoi(c.Query("user_id"))
	if err != nil {
		SendResponse(c, nil, nil)
		return
	}
	paramVar.UserId = int64(userid)
	paramVar.Token = c.Query("token")

	if len(paramVar.Token) == 0 || paramVar.UserId < 0 {
		SendResponse(c, nil, nil)
		return
	}

	resp, err := rpc.FavoriteList(ctx, &favorite.FavoriteListRequest{
		UserId: paramVar.UserId,
		Token:  paramVar.Token,
	})
	if err != nil {
		SendResponse(c, nil, nil)
		return
	}
	SendResponse(c, errno.Success, resp)
}

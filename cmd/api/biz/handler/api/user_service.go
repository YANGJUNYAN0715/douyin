// Code generated by hertz generator.

package api

import (
	"context"
	"fmt"
	"github.com/YANGJUNYAN0715/douyin/tree/guo/cmd/api/biz/model/api"
	"github.com/YANGJUNYAN0715/douyin/tree/guo/cmd/api/biz/mw"
	"github.com/YANGJUNYAN0715/douyin/tree/guo/cmd/api/biz/rpc"
	"log"
	"github.com/YANGJUNYAN0715/douyin/tree/guo/kitex_gen/user"
	// "github.com/YANGJUNYAN0715/douyin/tree/guo/kitex_gen/message"
	"github.com/YANGJUNYAN0715/douyin/tree/guo/pkg/consts"
	"github.com/YANGJUNYAN0715/douyin/tree/guo/pkg/errno"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"path/filepath"
)

// LoginUser .
// @router /douyin/user/login/ [POST]
func LoginUser(ctx context.Context, c *app.RequestContext) {
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// RegisterUser .
// @router /douyin/user/register/ [POST]
func RegisterUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterUserRequest
	err = c.BindAndValidate(&req)
	
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}

	err = rpc.RegisterUser(context.Background(), &user.RegisterUserRequest{
		Username: req.Username,
		Password: req.Password,

	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	SendResponse(c, errno.Success, nil)
}

// UserInfo .
// @router /douyin/user/ [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserInfoRequest
	err = c.BindAndValidate(&req)
	
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	v, _ := c.Get(consts.IdentityKey)
	user_info, err := rpc.UserInfo(context.Background(), &user.UserInfoRequest{
		UserId: v.(*api.User).ID,
		Token: req.Token,

	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	log.Println("***------------------------------------UserInfo-service---------------------------------------***")
	log.Println(user_info)
	Err := errno.ConvertErr(errno.Success)
	c.JSON(200, utils.H{
		"status_code": Err.ErrCode,
		"status_msg":  Err.ErrMsg,
		"user":   user_info,
	})
}

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	log.Println("***------------------------------------PublishAction-service---------------------------------------***")
	var err error
	var req api.PublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	v, _ := c.Get(consts.IdentityKey)
	video_data, err := c.FormFile("data")
	
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	log.Println("/////////////////////////////////////////////")
	filename := filepath.Base(video_data.Filename)
	finalName := fmt.Sprintf("%s", filename)
	video_path := filepath.Join(consts.VideoSavePath, finalName)

	err = c.SaveUploadedFile(video_data, video_path)

	if err != nil {
		
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	
	coverPath := "https://douyin-test-guo.oss-cn-hangzhou.aliyuncs.com/img/"
	// 获取视频截图
	snapshotName, err := GetSnapshot(video_path, coverPath, 1)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
	}

	err = rpc.PublishAction(context.Background(), &user.PublishActionRequest{
		UserId:  v.(*api.User).ID,
		Token: req.Token,
		Title: req.Title,
		
		FileUrl: video_path,
		CoverUrl: fmt.Sprintf("%s.jpg", filepath.Join(coverPath, snapshotName)),
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	log.Println(fmt.Sprintf("%s.jpg", filepath.Join(coverPath, snapshotName)),video_path, req.Title,req.Token)
	SendResponse(c, errno.Success, nil)
}

// PublishList .
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	v, _ := c.Get(consts.IdentityKey)
	videos, err := rpc.PublishList(context.Background(), &user.PublishListRequest{
		UserId: v.(*api.User).ID,
		Token: req.Token,

	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	Err := errno.ConvertErr(errno.Success)
	c.JSON(200, utils.H{
		"status_code": Err.ErrCode,
		"status_msg":  Err.ErrMsg,
		"video_list":   videos,
	})
}

// GetUserFeed .
// @router /douyin/feed/ [GET]
func GetUserFeed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	//从token中获取id
	u, _ := c.Get(consts.IdentityKey)
	
	if u == nil {
		SendResponse(c, errno.Token2UserIdErr, nil)
		return
	}
	//越权错误
	if req.UserID != 0 && req.UserID != u.(*api.User).ID {
		SendResponse(c, errno.BrokenAccessControlErr, nil)
		return
	}
	if req.UserID == 0 {
		req.UserID = u.(*api.User).ID
	}

	log.Println("-------req.UserID-----")
	log.Println(req.UserID)
	
	feedresponse,err := rpc.GetUserFeed(ctx,&user.DouyinFeedRequest{
		UserId: u.(*api.User).ID,
		// LatestTime: req.LatestTime,
		Token:  req.Token,
	})
	//
	//SendResponse2(c, feedresponse)
	Err := errno.ConvertErr(errno.Success)
	c.JSON(consts.StatusOK, utils.H{
		"status_code": Err.ErrCode,
		"status_msg":  Err.ErrMsg,
		"next_time": feedresponse.NextTime,
    	"video_list": feedresponse.VideoList,
	})
	return
}

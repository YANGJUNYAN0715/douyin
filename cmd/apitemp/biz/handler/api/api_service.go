// Code generated by hertz generator.
// 主要的服务逻辑
package api

import (
	"context"
	//"strconv"
	"log"

	"github.com/YANGJUNYAN0715/douyin/tree/zhao/cmd/api/biz/model/api"
	"github.com/YANGJUNYAN0715/douyin/tree/zhao/cmd/api/biz/mw"
	"github.com/YANGJUNYAN0715/douyin/tree/zhao/cmd/api/biz/rpc"
	"github.com/YANGJUNYAN0715/douyin/tree/zhao/kitex_gen/user"
	"github.com/YANGJUNYAN0715/douyin/tree/zhao/pkg/consts"
	"github.com/YANGJUNYAN0715/douyin/tree/zhao/pkg/errno"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
)

// Register .
// @router /douyin/user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DouyinUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}

	err = rpc.Register(context.Background(),&user.DouyinUserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil{
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	SendResponse(c, errno.Success, nil)
}

// Login .
// @router /douyin/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// GetUserById .
// @router /douyin/user/ [GET]
func GetUserById(ctx context.Context, c *app.RequestContext) {
	// var userVar UserParam
	// userid, err := strconv.Atoi(c.Query("user_id"))
	// if err != nil {
	// 	SendResponse(c, errno.ConvertErr(err), nil)
	// 	return
	// }
	// userVar.UserId = int64(userid)
	// userVar.Token = c.Query("token")
	// if len(userVar.Token) == 0 || userVar.UserId < 0 {
	// 	SendResponse(c, errno.ConvertErr(err), nil)
	// 	return
	// }
	// resp, err := rpc.GetUserById(ctx, &user.DouyinUserRequest{
	// 	UserId: userVar.UserId,
	// 	Token:  userVar.Token,
	// })
	// if err != nil {
	// 	SendResponse(c, errno.ConvertErr(err), nil)
	// 	return
	// }
	// Err := errno.ConvertErr(errno.Success)
	// c.JSON(consts.StatusOK, utils.H{
	// 	"status_code": Err.ErrCode,
	// 	"status_msg":  Err.ErrMsg,
	// 	"user":   resp,
	// })
	//SendResponse(c, errno.Success, resp)
	// var err error
	// var req api.DouyinUserRequest
	// err = c.BindAndValidate(&req)
	// if err != nil {
	// 	c.String(consts.StatusBadRequest, err.Error())
	// 	return
	// }

	// resp := new(api.DouyinUserResponse)

	// c.JSON(consts.StatusOK, resp)
	var err error
	var req api.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	//从token中获取id
	u, _ := c.Get(consts.IdentityKey)
	
	if u == nil {
		SendResponse(c, errno.Token2UserIdErr, nil)
		return
	}
	//越权错误
	if req.UserID != 0 && req.UserID != u.(*api.User).ID {
		SendResponse(c, errno.BrokenAccessControlErr, nil)
		return
	}
	if req.UserID == 0 {
		req.UserID = u.(*api.User).ID
	}
	log.Println(req.UserID)
	log.Println(req.Token)
	// resp := new(api.DouyinUserResponse)
	userinfo,err := rpc.GetUserById(ctx,&user.DouyinUserRequest{
		UserId: req.UserID,
		Token:  req.Token,
	})
	log.Println("***api-service***")
	log.Println(userinfo)
	// 客户端对JSON的名称有要求，不适用SendResponse
	Err := errno.ConvertErr(errno.Success)
	c.JSON(consts.StatusOK, utils.H{
		"status_code": Err.ErrCode,
		"status_msg":  Err.ErrMsg,
		"user":   userinfo,
	})
	return
}

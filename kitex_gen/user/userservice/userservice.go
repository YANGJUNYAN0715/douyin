// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	user "github.com/YANGJUNYAN0715/douyin/tree/guo/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"LoginUser":     kitex.NewMethodInfo(loginUserHandler, newUserServiceLoginUserArgs, newUserServiceLoginUserResult, false),
		"LogoutUser":    kitex.NewMethodInfo(logoutUserHandler, newUserServiceLogoutUserArgs, newUserServiceLogoutUserResult, false),
		"RegisterUser":  kitex.NewMethodInfo(registerUserHandler, newUserServiceRegisterUserArgs, newUserServiceRegisterUserResult, false),
		"UserInfo":      kitex.NewMethodInfo(userInfoHandler, newUserServiceUserInfoArgs, newUserServiceUserInfoResult, false),
		"PublishAction": kitex.NewMethodInfo(publishActionHandler, newUserServicePublishActionArgs, newUserServicePublishActionResult, false),
		"PublishList":   kitex.NewMethodInfo(publishListHandler, newUserServicePublishListArgs, newUserServicePublishListResult, false),
		"GetUserFeed":   kitex.NewMethodInfo(getUserFeedHandler, newUserServiceGetUserFeedArgs, newUserServiceGetUserFeedResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func loginUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceLoginUserArgs)
	realResult := result.(*user.UserServiceLoginUserResult)
	success, err := handler.(user.UserService).LoginUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLoginUserArgs() interface{} {
	return user.NewUserServiceLoginUserArgs()
}

func newUserServiceLoginUserResult() interface{} {
	return user.NewUserServiceLoginUserResult()
}

func logoutUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceLogoutUserArgs)
	realResult := result.(*user.UserServiceLogoutUserResult)
	success, err := handler.(user.UserService).LogoutUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLogoutUserArgs() interface{} {
	return user.NewUserServiceLogoutUserArgs()
}

func newUserServiceLogoutUserResult() interface{} {
	return user.NewUserServiceLogoutUserResult()
}

func registerUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceRegisterUserArgs)
	realResult := result.(*user.UserServiceRegisterUserResult)
	success, err := handler.(user.UserService).RegisterUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceRegisterUserArgs() interface{} {
	return user.NewUserServiceRegisterUserArgs()
}

func newUserServiceRegisterUserResult() interface{} {
	return user.NewUserServiceRegisterUserResult()
}

func userInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUserInfoArgs)
	realResult := result.(*user.UserServiceUserInfoResult)
	success, err := handler.(user.UserService).UserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUserInfoArgs() interface{} {
	return user.NewUserServiceUserInfoArgs()
}

func newUserServiceUserInfoResult() interface{} {
	return user.NewUserServiceUserInfoResult()
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServicePublishActionArgs)
	realResult := result.(*user.UserServicePublishActionResult)
	success, err := handler.(user.UserService).PublishAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServicePublishActionArgs() interface{} {
	return user.NewUserServicePublishActionArgs()
}

func newUserServicePublishActionResult() interface{} {
	return user.NewUserServicePublishActionResult()
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServicePublishListArgs)
	realResult := result.(*user.UserServicePublishListResult)
	success, err := handler.(user.UserService).PublishList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServicePublishListArgs() interface{} {
	return user.NewUserServicePublishListArgs()
}

func newUserServicePublishListResult() interface{} {
	return user.NewUserServicePublishListResult()
}

func getUserFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceGetUserFeedArgs)
	realResult := result.(*user.UserServiceGetUserFeedResult)
	success, err := handler.(user.UserService).GetUserFeed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUserFeedArgs() interface{} {
	return user.NewUserServiceGetUserFeedArgs()
}

func newUserServiceGetUserFeedResult() interface{} {
	return user.NewUserServiceGetUserFeedResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) LoginUser(ctx context.Context, req *user.LoginUserRequest) (r *user.LoginUserResponse, err error) {
	var _args user.UserServiceLoginUserArgs
	_args.Req = req
	var _result user.UserServiceLoginUserResult
	if err = p.c.Call(ctx, "LoginUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LogoutUser(ctx context.Context, req *user.LogoutUserRequest) (r *user.LogoutUserResponse, err error) {
	var _args user.UserServiceLogoutUserArgs
	_args.Req = req
	var _result user.UserServiceLogoutUserResult
	if err = p.c.Call(ctx, "LogoutUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RegisterUser(ctx context.Context, req *user.RegisterUserRequest) (r *user.RegisterUserResponse, err error) {
	var _args user.UserServiceRegisterUserArgs
	_args.Req = req
	var _result user.UserServiceRegisterUserResult
	if err = p.c.Call(ctx, "RegisterUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserInfo(ctx context.Context, req *user.UserInfoRequest) (r *user.UserInfoResponse, err error) {
	var _args user.UserServiceUserInfoArgs
	_args.Req = req
	var _result user.UserServiceUserInfoResult
	if err = p.c.Call(ctx, "UserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishAction(ctx context.Context, req *user.PublishActionRequest) (r *user.PublishActionResponse, err error) {
	var _args user.UserServicePublishActionArgs
	_args.Req = req
	var _result user.UserServicePublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishList(ctx context.Context, req *user.PublishListRequest) (r *user.PublishListResponse, err error) {
	var _args user.UserServicePublishListArgs
	_args.Req = req
	var _result user.UserServicePublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserFeed(ctx context.Context, req *user.DouyinFeedRequest) (r *user.DouyinFeedResponse, err error) {
	var _args user.UserServiceGetUserFeedArgs
	_args.Req = req
	var _result user.UserServiceGetUserFeedResult
	if err = p.c.Call(ctx, "GetUserFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
